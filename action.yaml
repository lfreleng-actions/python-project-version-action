---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-project-version-action
name: 'üêç Python Project Version'
description: 'Returns the version of a Python Project'
# Supports both pyproject.toml and setup.py project descriptions

inputs:
  # Optional
  path_prefix:
    description: 'Directory location containing project code'
    required: false
    default: '.'

outputs:
  python_project_version:
    description: 'The current version declared for a Python project'
    value: "${{ steps.set.outputs.python_project_version }}"
  source:
    # yamllint disable-line rule:line-length
    description: 'File used to source project metadata [pyproject.toml|setup.py]'
    value: "${{ steps.set.outputs.python_project_version }}"

runs:
  using: 'composite'
  steps:
    - name: 'Setup action/environment'
      shell: bash
      run: |
        # Setup action/environment

        # Verify path_prefix a valid directory path
        if [ ! -d "${{ inputs.path_prefix }}" ]; then
          echo 'Error: invalid path/prefix to project directory ‚ùå'; exit 1
        fi

    # yamllint disable-line rule:line-length
    - uses: lfreleng-actions/path-check-action@aa7dabfa92e50e31a0f091dd3e2741692e8dde07 # v0.1.5
      id: 'setup-py'
      with:
        path: "${{ inputs.path_prefix }}/setup-py"

    - name: 'Use project version from setup.py'
      id: 'setup-py-version'
      if: steps.setup-py.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/file-grep-regex-action@64fbf6bd3315530c6819e16c5b065e3bfc4f16d9 # v0.1.3
      with:
        flags: '-oP -m1'
        # https://regex101.com/r/QKYHId/1
        regex: '(?<=version=")([^"]*)'
        filename: "${{ inputs.path_prefix }}/setup.py"

    # yamllint disable-line rule:line-length
    - uses: lfreleng-actions/path-check-action@aa7dabfa92e50e31a0f091dd3e2741692e8dde07 # v0.1.5
      id: 'pyproject-toml'
      with:
        path: "${{ inputs.path_prefix }}/pyproject.toml"

    - name: 'Error: Python project metadata NOT found'
      if: steps.pyproject-toml.outputs.type == 'invalid' &&
        steps.setup-py.outputs.type == 'invalid'
      shell: bash
      run: |
        # Error: Python project metadata NOT found
        echo 'Error: neither pyproject.toml nor setup.py were found ‚ùå'
        exit 1

    - name: 'Determine versioning type [static|dynamic]'
      if: steps.project-toml.outputs.type == 'file'
      id: versioning
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-dynamic-version-action@757278a7dce3add2c777305e7ec61d9e2b97ed7e # v0.1.6
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: 'Use project version from pyproject.toml'
      id: 'pyproject-toml-version'
      # yamllint disable-line rule:line-length
      if: steps.pyproject-toml.outputs.type == 'file' && steps.versioning.outputs.dynamic_version != 'true'
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/file-grep-regex-action@64fbf6bd3315530c6819e16c5b065e3bfc4f16d9 # v0.1.3
      with:
        flags: '-oP -m1'
        # https://regex101.com/r/MWmRge/1
        regex: '(?<=^version = ")([^"]*)'
        filename: "${{ inputs.path_prefix }}/pyproject.toml"

    - name: 'Return extracted values'
      id: set
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Return extracted values

        if [ "${{ steps.pyproject-toml.outputs.type }}" = 'file' ]; then
          source='pyproject.toml'
          version="${{ steps.pyproject-toml-version.outputs.extracted_string}}"
        elif [ "${{ steps.setup-py.outputs.type }}" = 'file' ]; then
          source='setup.py'
          version="${{ steps.setup-py-version.outputs.extracted_string}}"
        fi
        if [ "${{ steps.versioning.outputs.dynamic_version }}" = 'true' ]; then
          version='dynamic'
        fi

        # Validate and output captured value
        if [ -z "$version" ]; then
          echo 'Project version extraction failed ‚ùå'; exit 1
        else
          echo "Python project version: $version [$source] ‚úÖ"
          echo "python_project_version=$version" >> "$GITHUB_ENV"
          echo "python_project_version=$version" >> "$GITHUB_OUTPUT"
        fi
